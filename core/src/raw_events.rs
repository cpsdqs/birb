//! Raw events for backends.

use crate::events::{KeyCode, KeyModifiers, PointerDevice};

/// Type for event IDs.
pub type EventId = usize;

/// Type for unique pointer IDs.
pub type PointerId = u128;

/// Hover event phases.
///
/// This enum has an ordering: Entered < Moved = Stationary < Left, and events are guaranteed
/// to be generated in this order for a given device.
#[repr(C)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum HoverEventPhase {
    /// The device has entered proximity.
    ///
    /// This event *must* be emitted before any other hover event for a device, even if the device
    /// does not support the notion of proximity (such as a mouse or trackpad).
    Entered = 0,
    /// The device has been moved since the last event.
    Moved = 1,
    /// The device hasn’t moved since the last event but a hover event is being emitted anyway,
    ///* most likely caused by a change in tilt or other lateral parameters.
    Stationary = 2,
    /// The device has left proximity.
    Left = 3,
}

/// Pointer event phases.
///
/// This enum has an ordering: Began < Moved = Stationary < Ended = Canceled, and events are
/// guaranteed to be generated in this order for a given device.
#[repr(C)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum PointerEventPhase {
    /// The pointing device has been activated.
    ///
    /// This usually means that the device has touched down on the screen, or that a mouse button
    /// was pressed. This will not be emitted if more mouse buttons are pressed.
    Began = 0,
    /// The pointing device has been moved since the last event.
    Moved = 1,
    /// The pointing device has not been moved since the last event, but an event is being emitted
    /// anyway, probably caused by lateral properties such as pressure or tilt.
    Stationary = 2,
    /// The pointing device has been completely deactivated.
    ///
    /// This usually means that the device has stopped touching the screen, or that all mouse
    /// buttons have been released.
    Ended = 3,
    /// The stream of pointer events has been canceled for some reason.
    Canceled = 4,
}

/// Keyboard event phases.
///
/// This enum has an ordering: Down < Repeat < Up, and events are guaranteed to be generated in this
/// order for any given key.
#[repr(C)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum KeyEventPhase {
    /// The key was pressed.
    Pressed = 0,
    /// The key was repeated due to being held down.
    Repeat = 2,
    /// The key was released.
    Released = 1,
}

/// A raw event, generated by a backend.
#[derive(Debug, Clone, PartialEq)]
pub enum RawEvent {
    Hover {
        /// The kind of device that is generating hover events.
        device: PointerDevice,
        /// The location in the root view.
        root_location: (f64, f64),
        /// The device’s tilt, expressed as a unit vector aligned with the window coordinate system,
        /// with an additional Z axis pointing outwards.
        ///
        /// Devices that do not support this should always have a tilt of [0, 0, 1].
        tilt: (f64, f64, f64),
        /// An ID that uniquely identifies this event stream for the duration of the event.
        event_id: EventId,
        /// The unique ID of the pointing device that generated this event; may be zero.
        ///
        /// If nonzero, it is guaranteed to be stable.
        unique_id: PointerId,
        /// The hover event phase for this pointer.
        phase: HoverEventPhase,
        /// The modifier keys that are currently being pressed.
        modifiers: KeyModifiers,
        // TODO: NSEvent.ButtonMask
    },
    Pointer {
        /// The kind of device that is generating pointer events.
        device: PointerDevice,
        /// The location in the root view.
        root_location: (f64, f64),
        /// The pressure with which the device may be pressing down on the screen.
        ///
        /// Will be 1 for devices that do not support pressure.
        pressure: f64,
        /// The device’s tilt, expressed as a unit vector aligned with the window coordinate system,
        /// with an additional Z axis pointing outwards.
        ///
        /// Devices that do not support this should always have a tilt of [0, 0, 1].
        tilt: (f64, f64, f64),
        /// An ID that uniquely identifies this event stream for the duration of the event.
        event_id: EventId,
        /// The unique ID of the pointing device that generated this event; may be zero.
        ///
        /// If nonzero, it is guaranteed to be stable.
        unique_id: PointerId,
        /// The pointer event phase for this pointing device.
        phase: PointerEventPhase,
        /// The modifier keys that are currently being pressed.
        modifiers: KeyModifiers,
    },
    Key {
        /// The characters that are being input.
        chars: String,
        /// The characters that would be input were the modifier keys not being pressed.
        chars_without_mod: String,
        /// The key code of the keyboard key.
        key_code: KeyCode,
        /// The phase of this keyboard event.
        phase: KeyEventPhase,
        /// The modifier keys that are currently being pressed.
        modifiers: KeyModifiers,
    },
    Scroll {
        /// The location in the root view.
        root_location: (f64, f64),
        /// The scroll delta.
        delta: (f64, f64),
        /// Whether the device scrolls in discrete increments (like most mouse wheels) or
        /// continuously (like a trackpad).
        is_discrete: bool,
    },
    SetRootSize {
        /// The new size of the root view.
        size: (f64, f64),
    },
}
